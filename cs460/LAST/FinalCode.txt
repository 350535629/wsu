/********************* init.c file ****************/
//This is init.c
#include "ucode.c"
int console;
int uart1;
int uart2;
int parent()// P1's code
{
    int pid, status;
    while(1){
        printf("INIT : wait for ZOMBIE child\n");
        pid = wait(&status);
        if (pid==console){
            // if console login process died
            printf("INIT: forks a new console login\n");
            console = fork(); // fork another one
            if (console)
                continue;
            else
                exec("login /dev/tty0"); // new console login process
        }
        if (pid==uart1){
            printf("INIT: forks a new uart1 login!!!!!!!!!!!!!!\n");
            uart1 = fork();
            if (uart1)
                continue;
            else
                exec("login /dev/ttyS0");
        }
        if (pid==uart2){
            printf("INIT: forks a new uart2 login\n!!!!!!!!!!!!!!!!!!!!!!!!");
            uart2 = fork();
            if (uart1)
                continue;
            else
                exec("login /dev/ttyS1");
        }
        printf("INIT: I just buried an orphan child proc %d\n", pid);
    }
}
main()
{
    int in, out;
    in= open("/dev/tty0", O_RDONLY); // file descriptor 0
    out = open("/dev/tty0", O_WRONLY); // for display to console
    printf("INIT : fork a login proc on console\n");
    fork_uart1();
    fork_uart2();
    console = fork();
    if (console) // parent
        parent();
    else
        exec("login /dev/tty0");
}
int fork_uart1()
{
    int in1, out1;
    in1  = open("/dev/ttyS0", O_RDONLY); // file descriptor 0
    out1 = open("/dev/ttyS0", O_WRONLY); // for display to console
    printf("INIT : fork a login proc on uart1\n");
    uart1 = fork();
    if (!uart1)
        exec("login /dev/ttyS0");
}
int fork_uart2()
{
    int in2, out2;
    in2  = open("/dev/ttyS1", O_RDONLY); // file descriptor 0
    out2 = open("/dev/ttyS1", O_WRONLY); // for display to console
    printf("INIT : fork a login proc on uart2\n");
    uart2 = fork();
    if (!uart2)
        exec("login /dev/ttyS1");
}

//End of init.c









/**************************login.c***********************/
//This is login.c
#include "ucode.c"
int in, out, err;
char names[128], password[128];
//char data[1280];
typedef struct
{
    char name[128];
    char pwd[128];
    int gid;
    int uid;
    char fullname[128];
    char HOMEDIR[128];
    char program[128];
} User;

char* splitline(char *string)
{
    char* str = string;
    while(*str != ':' && *str != '\0' && *str != '\n')
    {
        str++;
    }
    *str = '\0';
    return ++str;
}

int sToi(char* str)
{
    int n = 0;
    while(*str != '\0')
    {
        n *= 10;
        n += (int)((char)*str - '0');
        str++;
    }
    return n;
}
int splitUsers(User *user, int file)
{
    char data[128];
    char *newdata;
    char *olddata;
    if (!readline(file, data))
    {
        //printf("Error, no users");
        return 0;
    }
    //printf("data:%s", data);

    newdata = splitline(data);
    strcpy(user->name, data);

    olddata = newdata;
    newdata = splitline(newdata);

    strcpy(user->pwd, olddata);

    olddata = newdata;
    newdata = splitline(newdata);
    olddata = (int)((char)*olddata-'0');
    user->gid = olddata;

    olddata = newdata;
    newdata = splitline(newdata);
    olddata = (int)((char)*olddata-'0');
    user->uid = olddata;

    olddata = newdata;
    newdata = splitline(newdata);
    strcpy(user->fullname, olddata);

    olddata = newdata;
    newdata = splitline(newdata);
    strcpy(user->HOMEDIR, olddata);

    olddata = newdata;
    newdata = splitline(newdata);
    strcpy(user->program, olddata);
}

int getuserlist(User *users)
{
    int filedata;
    filedata = open("/etc/passwd", O_RDONLY);

    User *ThisUser = users;
    while(splitUsers(ThisUser, filedata))
    {
        ThisUser++;
    }

    //close(filedata);
    //printf("\nfile closed.\n");
}

User* getUser(User* users, char* name)
{
    User* ThisUser = users;

    while(ThisUser)
    {

        if (!strcmp(name, ThisUser->name))
            return ThisUser;
        ThisUser++;
    }

    return 0;
}

int PrintUser(User* user)
{
    printf("username: %s. ", user->name);
    printf("password: %s. ", user->pwd);
    printf("gid: %d. ", user->gid);
    printf("uid: %d. ", user->uid);
    printf("fullname: %s. ", user->fullname);
    printf("homedir: %s. ", user->HOMEDIR);
    printf("program: %s. ", user->program);
}

main(int argc, char *argv[])
{
    /**
    char passwd[128];
    char line[256];
    int uid, gid;
    char uname[128];
    char pswd[128];
    char fullname[128], HOMEDIR[128], program[128];
    **/
    int fd;
//1.close file descriptors 0,1 inherited from INIT
    close(0); close(1);
//2.open argv[1] times as in(0), out(1), err(2)
    in  = open(argv[1], O_RDONLY);
    out = open(argv[1], O_WRONLY);
    err = open(argv[1], O_WRONLY);

    settty(argv[1]);//3.
    //fd = open("/etc/passwd", O_RDONLY);//4.

    User userlist[100];

    getuserlist(userlist);

    User* ThisUser=0;

    while(1){
        printf("login:");  gets(names);
        ThisUser = getUser(userlist, names);
        printf("Get OK");

        if(!ThisUser)
        {
            printf("Don't have this user");
            continue;
        }

        printf("password:");    gets(password);
        if (strcmp(password, ThisUser->pwd))
        {
            printf("Wrong password!");
            continue;
        }
/**
        strcpy(uname, splitline(line));
        strcpy(pswd,  splitline(line));
        gid = sToi(splitline(line));
        uid = sToi(splitline(line));
        strcpy(fullname, splitline(line));
        strcpy(HOMEDIR,  splitline(line));
        strcpy(program, splitline(line));
**/
        printf("user %s login!!!!!!", ThisUser->name);
        //for each line in /etc/passwd file do
        //tokenize user account line;
        chuid(ThisUser->uid, ThisUser->gid);
        chdir(ThisUser->HOMEDIR);
        //exec("sh");
        close("/etc/passwd");
        exec(ThisUser->program);
    }
    printf("login failed, try again\n");
}

//End of login.c









///This is cat.c
#include "ucode.c"


main(int argc, char* argv[])
{
    int i=0;
    char str[1280];
    int file;
    int file1, file2;
    STAT FileInfo;
    int filesize;
    if (argc == 1)
    {
        while(1)
        {
            printc('\n');
            gets(str);
            printf("%s", str);
        }
    }
    else
    {
        if (argv[2] == '\0')
        {
            file = open(argv[1], O_RDONLY);
            stat(argv[1], &FileInfo);
            filesize = FileInfo.st_size;
            read(file, str, filesize);
            close(file);
            printf("%s", str);
        }
        else if (argv[1] == '>')
        {
            //dup2(1, argv[2]);
            file = open(argv[2], O_WRONLY);
            printc('\n');
            gets(str);
            printf("%s", str);
            write(file, str, strlen(str));
            close(file);
        }
        else
        {
            if (argv [2] == '>')
            {
                dup2(argv[1], argv[3]);
                /**
                strcat(str, "cp ");
                strcat(str, argv[1]);
                strcat(str, argv[3]);
                printf("command:%s", str);
                exec(str);
                **/
            }
            else if (argv [2] == '>>')
            {
                file2 = open(argv[3], 2);
                file1 = open(argv[1], O_RDONLY);
                stat(argv[1], &FileInfo);
                filesize = FileInfo.st_size;
                read(file, str, filesize);
                write(file, str, filesize);
                close(file1);
                close(file2);
            }
            printf("Error command");
        }
    }


}
//End of cat.c










//This is more.c
#include "ucode.c"

#define rows 10
#define line 80

int main(int argc, char* argv[])
{
    char str[64];
    int i=0;
    int fd;

    fd = open(argv[1], O_RDONLY);

    while(i<rows)
    {
        readline(fd, str);
        if (!*str)
            break;
        printf("%s.%d", str, i++);
    }
    while(readline(fd, str))
    {
        if (str > 80)
        printf("%s", str);
        getc();
        printf("next");
    }

}
//End of more.c










//This is l2u.c
#include "ucode.c"

int main(int argc, char *argv[])
{
    char c;
    int f1 = 0;
    int f2 = 0;
    STAT fileinfo;

    if(argc == 1)
    {
        f1 = dup(0);
        f2 = dup(1);
    }
    else if (argc == 2)
    {
        f1 = open(argv[1], 0);
        f2 = dup(1);
    }
    else if(argc == 3)
    {
        f1 = open(argv[1], 0);

        stat(argv[2], &fileinfo);

        if(fileinfo.st_size)
        {
            printf("unlinking file\n");
            unlink(argv[2]);
        }
        creat(argv[2]);
        f2 = open(argv[2], 1);
    }

    while(read(f1, &c, 1))
    {
        if (c >= 97 && c <= 122)
        {
            c -= 32;
        }
        write(f2, &c, 1);
        if(c == '\n')
        {
            write(2, '\r', 1);
        }
        else if(c == '\r')
        {
            write(1, '\n', 1);
            write(2, '\r', 1);
        }

    }
    return;
}
//End of l2u.c










//This is grep.c
#include "ucode.c"

int main(int argc, char* argv[])
{
    int fd=0, size, i;
    int line=0;
    char str[128];
    int signal=1;
    char *s;
    size = strlen(argv[1]);

    if (argc == 2){
        fd = dup(0);
    }
    else{
        fd = open(argv[2], O_RDONLY);
    }
    if (!fd)
        return 0;
    i = 0;
    while(signal){
        line++;
        while(i<128){
            signal = read(fd, &str[i], 1);
            if (!signal || str[i] == '\n' || str[i] == '\r'){
                str[i+1] = '\0';
                break;
            }
            i++;
        }

        s = str;
        while( *s != '\n'){
            if (!strncmp(s, argv[1], size) && str[0]){
                write(1, str, i+1);
                break;
            }
            s++;
        }
    }

}
//End of grep.c









//This is sh.c
#include "ucode.c"

char str[1280];
char cmd1[128];
char cmd2[128];

main()
{
    char cmd[128];
    int i=0;
    while(1)
    {
        printf("start sh");
        printf("Command:");
        gets(cmd1);
        if (1)
        {
            printf("single cmd");
            printf("result:%d", strcmp(cmd1, "exit"));
            if (!strcmp(cmd1, "exit"))
            {
                printf("easy cmd");
                exec(0);
                return 0;
            }
            printf("run");
            singlecmd(cmd1);
        }
        else
        {
            printf("complex cmd");
            /**
            if (argc == 4){
                strcpy(cmd1, argv[1]);
                strcpy(cmd1, argv[2]);
                strcpy(cmd2, argv[4]);
                do_pipe(cmd1, cmd2);
            }
            **/
        }
    }
}

void singlecmd(char* command)
{
    int status;
    int pid = fork();

    printf("do run");
    if (pid == 0)
        exec(command);
    else
        pid = wait(&status);
}

void do_pipe(char* cmd1, char* cmd2)
{
    int pid, pd[2];
    pipe(pd);
    pid = fork();
    if(pid){
        close(pd[1]);
        dup2(pd[0], 0);
        exec(cmd2);
    }
    else{
        close(pd[0]);
        dup2(pd[1], 1);
        exec(cmd1);
    }
}

//End of sh.c



/********************************************************************
Copyright 2010-2017 K.C. Wang, <kwang@eecs.wsu.edu>
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
********************************************************************/
//This is Ucode.c


typedef unsigned char   u8;
typedef unsigned short u16;
typedef unsigned int   u32;

#include "uio.c"
#include "crt0.c"
//#include "string.h"

int pid;
char line[64], pathname[32], i2[32], i3[32];
char *name[16], components[64];
int nk;
#define EOF -1
extern char cr;

//void putchar(const char c){ }

int getc()
{
   int c, n;
   n = read(0, &c, 1);

   /*********************************************************************
   getc from KBD will NOT get 0 byte but reading file (after redirect 0
   to file) may get 0 byte ==> MUST return 2-byte -1 to differentiate.
   **********************************************************************/

   if (n==0 || c==4 || c==0 ) return EOF;
   return (c&0x7F);
}

// getline() does NOT show the input chars AND no cooking:
// for reditected inputs from a file which may contain '\b' chars

int getline(char *s)
{
  int c;
  char *cp = s;

  c = getc();

  while ((c != EOF) && (c != '\r') && (c != '\n')){
    *cp++ = c;
     c = getc();
  }
  if (c==EOF) return 0;

  *cp++ = c;         // a string with last char=\n or \r
  *cp = 0;
  //printf("getline: %s", s);
  return strlen(s);  // at least 1 because last char=\r or \n
}


// gets() show each input char AND cook input line

int gets(char *s)
{
  int c; char *cp, *cq, temp[128];

  cp = temp;    // get chars into temp[] first

  c = getc();
  while (c!= EOF && c != '\r' && c != '\n'){
    *cp++ = c;
    mputc(c);
    if (c == '\b'){ // handle \b key
      mputc(' ');
      mputc('\b');
    }
    c = getc();
  }
  mputc('\r'); mputc('\n');

  if (c==EOF) return 0;

  *cp = 0;

  // printf("temp=%s\n", temp);

  // cook line in temp[] into s
  cp = temp; cq = s;

  while (*cp){
    if (*cp == '\b'){
      if (cq > s)
	  cq--;
      cp++;
      continue;
    }
    *cq++ = *cp++;
  }
  *cq = 0;

  //printf("s=%s\n", s);

  return strlen(s)+1;  // line=CR or \n only return 1
}


int getpid()
{
   return syscall(0,0,0);
}

int getppid()
{
   return syscall(1,0,0);
}

void chname()
{
    char s[64];
    prints("input new name : ");
    gets(s);
    printf("s=%s\n", s);
    syscall(2, s, 0);
}


int getpri()
{
  return syscall(3,0,0);
}

int chpri(int value)
{
  return syscall(4,value,0);
}

int getuid()
{
  return syscall(4,0,0);
}

int chuid(int uid, int gid)
{
  return syscall(5,uid, gid);
}

int tswitch()
{
  return syscall(6,0,0);
}


int fork()
{
   return syscall(10, 0, 0);
}

int exec(char *cmd_line)
{
   return syscall(11, cmd_line, 0);
}

int wait(int *status)
{
  return syscall(12, status, 0);
}

/******** vfork in us.s *******
int vfork()
{
  return syscall(19,0,0);
}
**************************/

int thread(int fn, int stack, int flag, int ptr)
{
  return syscall(14, fn, stack, flag, ptr);
}

// 15-19: mutex for threads


int mutex_creat()
{
  return syscall(15, 0,0);
}

int mutex_lock(int *m)
{
  return syscall(16, m, 0);
}

int mutex_unlock(int *m)
{
  return syscall(17, m, 0);
}

int mutex_destroy(int *m)
{
  return syscall(18, m, 0);
}


int mkdir(char *name)
{
   return syscall(20, name, 0);
}

int rmdir(char *name)
{
   return syscall(21, name, 0);
}

int creat(char *filename)
{
    return syscall(22, filename, 30);
}

int link(char *oldfile, char *newfile)
{
  return syscall(23, oldfile, newfile,0);
}

int unlink(char *file)
{
  return syscall(24, file, 0);
}


int symlink(char *oldfile, char *newfile)
{
  return syscall(25, oldfile, newfile);
}

int readlink(char *file, char *linkname)
{
  return syscall(26, file, linkname, 0);
}

int chdir(char *name)
{
   return syscall(27, name, 0);
}

int getcwd(char *cwdname)
{
   return syscall(28, cwdname, 0);
}

int stat(char *filename, struct stat *sPtr)
{
   return syscall(29, filename, sPtr);
}

int fstat(int fd, char *sptr)
{
  return syscall(30,fd,sptr,0);
}


int open(char *file, int flag)
{
   return syscall(31, file, flag);

}

int close(int fd)
{
   return syscall(32, fd);
}

int lseek(int fd, u32 offset, int ww)
{
   return syscall(33, fd, (u32)offset, ww);
}

int read(int fd, char *buf, int nbytes)
{
  if (fd==0)
     nbytes = 1;
    return syscall(34, fd, buf, nbytes);
}

int write(int fd, char *buf, int nbytes)
{
    return syscall(35, fd, buf, nbytes);
}

int pipe(int *pd)
{
    return syscall(36, pd, 0);
}

int chmod(char *file, u16 mode)
{
   return syscall(37, file, mode);
}

int chown(char *file, int uid)
{
   return syscall(38, file, uid);
}

int touch(char *filename)
{
   return syscall(39, filename, 0);
}

int settty(char *tty)
{
   return syscall(40, tty, 0);
}

int gettty(char *tty)
{
   return syscall(41, tty, 0);
}


int dup(int fd)
{
   return syscall(42, fd, 0);
}

int dup2(int fd, int gd)
{
   return syscall(43, fd, gd);
}

int mount(char *dev, char **mpt)
{
  return syscall(45, dev, mpt);
}

int umount(char *dev)
{
  return syscall(46, dev);
}

int getSector(u32 sector, char *ubuf, u16 nsector)
{
  return syscall(47, sector, ubuf, nsector);
}

int do_cmd(int cmd, u16 value)
{
  return syscall(48, cmd, value);
}

int kill(int sig, int pid)
{
  return syscall(50, sig, pid);
}

int signal(int sig, int catcher)
{
  printf("signal go ");
   syscall(51, sig, catcher);
  printf("signal return\n");
}

int pause(int t)
{
  return syscall(52, t);
}

int itimer(int t)
{
  printf("itimer go ");
  syscall(53, t);
  printf("ucode: itimer return\n");
}

int send(char *msg, int pid)
{
  syscall(54, msg, pid);
}

int recv(char *msg)
{
  syscall(55,msg, 0);
}

int do_texit()
{
  int pid = getpid();
  printf("thread %d texit()\n", pid);
  texit(pid);
}

int tjoin(int n)
{
  return syscall(56, n, 0);
}

int texit(int v)
{
  syscall(57,v,0);
}

/************************************************
int ps(char *y)
{
   return syscall(44,y,0);
}
// ********** CDROM syscalls ******************
int setcolor(int color)
{
  return syscall(59, color,0);
}
*************************************/

int sync()
{
  return syscall(60, 0, 0);
}

int ups()
{
  return syscall(61, 0, 0);
}

int thinit()
{
  return syscall(62, 0, 0);
}

int sbrk()
{
  return syscall(63, 0, 0);
}

int page_out(int n)
{
  return syscall(64, n, 0);
}

int getphypage(int x, int y)
{
  return syscall(65, x, y);
}

int pagetable()
{
  return syscall(66, 0, 0);
}

int getcs()
{
  return syscall(67,0,0);
}

int exit(int value)
{
   return syscall(9, value, 0);
}

int pwd()
{
  char cwd[64];
  getcwd(cwd);
  printf("%s\n\r", cwd);
  return 0;
}


// nk = eatpat(line, name);

int eatpath(char *line, char *name[ ])
{
  int i, n; char *cp;

  n = 0;
  for (i=0; i<16; i++)
      name[i]=0;

  cp = line;
  while (*cp != 0){
       while (*cp == ' ')
              *cp++ = 0;
       if (*cp != 0)
           name[n++] = cp;
       while (*cp != ' ' && *cp != 0)
	       cp++;
       if (*cp != 0)
	   *cp = 0;
       else
           break;
       cp++;
  }

  /*
  for (i=0; i < n; i++){
      if (name[i]){
         prints(name[i]); prints("  ");
      }
  }
  prints("\n\r");
  */
  return n;
}
/*
int strcasecmp(char *s1, char *s2)
{
  char *cp;

  char t1[64], t2[64];
  strcpy(t1, s1);
  strcpy(t2,s2);

  //printf("t1=%s  t2=%s  ", t1, t2);

  cp = t1;

  while(*cp){  // all to lower case
    if (('A' <= *cp) && (*cp <= 'Z')){
      *cp = *cp - 'A' + 'a';
    }
    cp++;
  }
  //printf("t1=%s  ", t1);
  cp = t2;
  while(*cp){  // all to upper case
    if (('A' <= *cp) && (*cp <= 'Z')){
      *cp = *cp - 'A' + 'a';
    }
    cp++;
  }
  //printf("t2=%s\n", t1, t2);
  return strcmp(t1, t2);
}
*/

int readline(int fd, char* str)
{
    char c;
    char *cp = str;
    int r;

    r = read(fd, &c, 1);

    while (r && (c != EOF) && (c != '\r') && (c != '\n')){
        *cp++ = c;
        r = read(fd, &c, 1);
    }
    if (c==EOF) return 0;
    if (!r) return 0;

    *cp++ = c;         // a string with last char=\n or \r
    *cp = 0;
    //printf("getline: %s", s);
    return strlen(str);  // at least 1 because last char=\r or \n
}
//End of ucode.

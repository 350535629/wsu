#! /usr/bin/env python3

from tkinter import *

class Cell():
    def __init__(self, status=0, nextstatus=0, x=0, y=0):
        self.status = status
        self.nextstatus = nextstatus
        #self.prestatus = []
        #self.prestatus.append(prestatus)
        #self.place = (x, y)

    def step(self, status=0):
        #self.prestatus.append(self.status)
        self.nextstatus = status

class CellArray():
    def __init__(self, size=20):
        self.size = size
        self.array = []
        self.arraylist = []
        self.paststatus=[]
        self.initarray()
        self.arraylist.append(self.array)
        self.notearray()

    def initarray(self):
        for i in range(self.size):
            self.array.append([])
            for j in range(self.size):
                self.array[i].append(Cell(0, i, j))

    def notearray(self):
        sta = []
        for i in range(self.size):
            sta.append([])
            for j in range(self.size):
                sta[i].append(self.array[i][j].nextstatus)
        self.paststatus.append(sta)

    def checkneighbour(self, x, y):
        sum = 0
        s = [(x+1, y), (x+1, y-1), (x, y-1),
             (x-1, y-1), (x-1, y), (x-1, y+1),
             (x, y+1), (x+1, y+1)]
        for (a, b) in s:
            if 0<=a<self.size and 0<=b<self.size:
                if self.array[a][b].status:
                    sum += 1
        if self.array[x][y].status and 3 > sum >= 2:
            self.array[x][y].step(1)
        elif sum == 3:
            self.array[x][y].step(1)
        else:
            self.array[x][y].step()

    def step(self):
        for i in range(self.size):
            for j in range(self.size):
                self.checkneighbour(i, j)

class CellCanvas(Canvas):
    def __init__(self, parent = None, size=20, blk_size=10):
        super().__init__(parent, width = 200, height = 200, bg='white')
        board = Canvas(self, width=720, height=720)
        #board.grid(row=1, column=1, columnspan=8)
        self.size = size
        self.blks = CellArray(size)
        self.blk_size  = blk_size
        self.bind("<Button-1>", self.changecolor)

    def changecolor(self, event):
        i = event.x // self.blk_size
        j = event.y // self.blk_size
        (x1, y1) = (i*self.blk_size, j*self.blk_size)
        (x2, y2) = (x1+self.blk_size, y1+self.blk_size)
        self.create_rectangle(x1, y1, x2, y2, fill = "black")
        self.blks.array[i][j].status = 1

    def step(self):
        self.delete("all")
        self.blks.step()
        for i in range(self.size):
            for j in range(self.size):
                if self.blks.array[i][j].nextstatus == 1:
                    (x1, y1) = (i*self.blk_size, j*self.blk_size)
                    (x2, y2) = (x1+self.blk_size, y1+self.blk_size)
                    self.create_rectangle(x1, y1, x2, y2, fill = "black")
                self.blks.array[i][j].status = self.blks.array[i][j].nextstatus
        self.blks.arraylist.append(self.blks.array)
        self.blks.notearray()

    def back(self):
        self.delete("all")
        if self.blks.paststatus[-2]:
            array = self.blks.paststatus[-2]
            del self.blks.paststatus[-2]
        for i in range(self.size):
            for j in range(self.size):
                self.blks.array[i][j].nextstatus = array[i][j]
                if self.blks.array[i][j].nextstatus == 1:
                    (x1, y1) = (i*self.blk_size, j*self.blk_size)
                    (x2, y2) = (x1+self.blk_size, y1+self.blk_size)
                    self.create_rectangle(x1, y1, x2, y2, fill = "black")
                self.blks.array[i][j].status = self.blks.array[i][j].nextstatus


    def clear(self):
        self.delete("all")
        self.blks = CellArray(self.size)

class MainBoard(Frame):
    def __init__(self, title='Life Game'):
        super().__init__()
        self.board = CellCanvas()
        self.board.grid(row=0, column=0)#, columnspan=8)
        qbtn = Button(self, text='Quit', command=self.quit)
        sbtn = Button(self, text='Step', command=self.step)
        cbtn = Button(self, text='Clear',command=self.clear)

        runbackbtn  = Button(self, text='<<',command=self.runb)
        stepbackbtn = Button(self, text='<', command=self.stepb)
        stepforwbtn = Button(self, text='>', command=self.step)
        runforwbtn  = Button(self, text='>>',command=self.run)

        #speed = Scale(self, from_=1, to=5, resolution=1, orient=HORIZONTAL, variable=speed)

        qbtn.grid(row=2, column=2)
        sbtn.grid(row=2, column=3)
        cbtn.grid(row=2, column=4)
        runbackbtn.grid(row=3, column=2)
        stepbackbtn.grid(row=3,column=3)
        stepforwbtn.grid(row=3,column=4)
        runforwbtn.grid(row=3, column=5)

        #speed.grid(row=4, column=1, columnspan=2)

    def step(self):
        self.board.step()

    def clear(self):
        self.board.clear()

    def run(self):
        self.board.step()
        self.board.step()

    def stepb(self):
        self.board.back()
    def runb(self):
        self.board.back()
        self.board.back()

root = Tk()
root.title("Life game")
board = MainBoard(root)
board.grid()
root.mainloop()




